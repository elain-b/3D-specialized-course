# -*- coding: mbcs -*-
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.openStep('C:/Users/517-12/Desktop/Sample_File/Day3/HingeAssembly.stp', 
    scaleFromFile=OFF)
mdb.models['Model-1'].PartFromGeometryFile(combine=False, dimensionality=
    THREE_D, geometryFile=mdb.acis, name='HingeAssembly', type=DEFORMABLE_BODY)
mdb.models['Model-1'].Material(name='Material-1')
mdb.models['Model-1'].materials['Material-1'].Elastic(table=((210000.0, 0.3), 
    ))
mdb.models['Model-1'].HomogeneousSolidSection(material='Material-1', name=
    'Section-1', thickness=None)
mdb.models['Model-1'].parts['HingeAssembly'].Set(cells=
    mdb.models['Model-1'].parts['HingeAssembly'].cells.getSequenceFromMask((
    '[#1 ]', ), ), name='Set-1')
mdb.models['Model-1'].parts['HingeAssembly'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=
    mdb.models['Model-1'].parts['HingeAssembly'].sets['Set-1'], sectionName=
    'Section-1', thicknessAssignment=FROM_SECTION)
mdb.models['Model-1'].ConstrainedSketch(name='__profile__', sheetSize=200.0)
mdb.models['Model-1'].sketches['__profile__'].ConstructionLine(point1=(0.0, 
    -100.0), point2=(0.0, 100.0))
mdb.models['Model-1'].sketches['__profile__'].FixedConstraint(entity=
    mdb.models['Model-1'].sketches['__profile__'].geometry[2])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(10.0, 30.0), point2=
    (10.0, -30.0))
mdb.models['Model-1'].sketches['__profile__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['Model-1'].sketches['__profile__'].geometry[3])
mdb.models['Model-1'].sketches['__profile__'].ObliqueDimension(textPoint=(
    17.0297622680664, 15.3713150024414), value=60.0, vertex1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[0], vertex2=
    mdb.models['Model-1'].sketches['__profile__'].vertices[1])
mdb.models['Model-1'].sketches['__profile__'].DistanceDimension(entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[2], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[3], textPoint=(
    5.76597595214844, 16.5364875793457), value=10.0)
mdb.models['Model-1'].sketches['__profile__'].dimensions[1].setValues(value=12)
mdb.models['Model-1'].Part(dimensionality=THREE_D, name='Part-2', type=
    ANALYTIC_RIGID_SURFACE)
mdb.models['Model-1'].parts['Part-2'].AnalyticRigidSurfRevolve(sketch=
    mdb.models['Model-1'].sketches['__profile__'])
del mdb.models['Model-1'].sketches['__profile__']
mdb.models['Model-1'].parts['Part-2'].ReferencePoint(point=
    mdb.models['Model-1'].parts['Part-2'].vertices[1])
mdb.models['Model-1'].parts['HingeAssembly'].PartitionCellByExtendFace(cells=
    mdb.models['Model-1'].parts['HingeAssembly'].cells.getSequenceFromMask((
    '[#1 ]', ), ), extendFace=
    mdb.models['Model-1'].parts['HingeAssembly'].faces[7])
mdb.models['Model-1'].parts['HingeAssembly'].PartitionCellByPlanePointNormal(
    cells=
    mdb.models['Model-1'].parts['HingeAssembly'].cells.getSequenceFromMask((
    '[#2 ]', ), ), normal=mdb.models['Model-1'].parts['HingeAssembly'].edges[1]
    , point=mdb.models['Model-1'].parts['HingeAssembly'].InterestingPoint(
    mdb.models['Model-1'].parts['HingeAssembly'].edges[4], CENTER))
mdb.models['Model-1'].parts['HingeAssembly'].PartitionCellByPlanePointNormal(
    cells=
    mdb.models['Model-1'].parts['HingeAssembly'].cells.getSequenceFromMask((
    '[#5 ]', ), ), normal=
    mdb.models['Model-1'].parts['HingeAssembly'].edges[24], point=
    mdb.models['Model-1'].parts['HingeAssembly'].InterestingPoint(
    mdb.models['Model-1'].parts['HingeAssembly'].edges[14], CENTER))
mdb.models['Model-1'].parts['HingeAssembly'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=4.0)
mdb.models['Model-1'].parts['HingeAssembly'].generateMesh()
mdb.models['Model-1'].rootAssembly.DatumCsysByDefault(CARTESIAN)
mdb.models['Model-1'].rootAssembly.Instance(dependent=ON, name=
    'HingeAssembly-1', part=mdb.models['Model-1'].parts['HingeAssembly'])
mdb.models['Model-1'].rootAssembly.Instance(dependent=ON, name=
    'HingeAssembly-2', part=mdb.models['Model-1'].parts['HingeAssembly'])
mdb.models['Model-1'].rootAssembly.instances['HingeAssembly-2'].translate(
    vector=(88.0, 0.0, 0.0))
mdb.models['Model-1'].rootAssembly.Instance(dependent=ON, name='Part-2-1', 
    part=mdb.models['Model-1'].parts['Part-2'])
mdb.models['Model-1'].rootAssembly.instances['Part-2-1'].translate(vector=(
    182.4, 0.0, 0.0))
mdb.models['Model-1'].rootAssembly.Coaxial(fixedAxis=
    mdb.models['Model-1'].rootAssembly.instances['HingeAssembly-1'].faces[5], 
    flip=ON, movableAxis=
    mdb.models['Model-1'].rootAssembly.instances['HingeAssembly-2'].faces[5])
mdb.models['Model-1'].rootAssembly.ParallelFace(fixedPlane=
    mdb.models['Model-1'].rootAssembly.instances['HingeAssembly-1'].faces[16], 
    flip=OFF, movablePlane=
    mdb.models['Model-1'].rootAssembly.instances['HingeAssembly-2'].faces[16])
mdb.models['Model-1'].rootAssembly.Coaxial(fixedAxis=
    mdb.models['Model-1'].rootAssembly.instances['HingeAssembly-2'].faces[5], 
    flip=OFF, movableAxis=
    mdb.models['Model-1'].rootAssembly.instances['Part-2-1'].faces[0])
mdb.models['Model-1'].rootAssembly.translate(instanceList=('Part-2-1', ), 
    vector=(0.0, 0.0, -20.0))
mdb.models['Model-1'].StaticStep(initialInc=0.01, name='Step-1', nlgeom=ON, 
    previous='Initial')
mdb.models['Model-1'].rootAssembly.Surface(name='Surf-1', side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['Part-2-1'].faces.getSequenceFromMask(
    ('[#1 ]', ), ))
mdb.models['Model-1'].rootAssembly.Surface(name='hinge1-HOLE', side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['HingeAssembly-1'].faces.getSequenceFromMask(
    ('[#4000020 ]', ), ))
mdb.models['Model-1'].rootAssembly.Surface(name='hinge1-HOLE', side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['HingeAssembly-1'].faces.getSequenceFromMask(
    ('[#c000020 ]', ), ))
mdb.models['Model-1'].rootAssembly.Surface(name='hinge1-HOLE', side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['HingeAssembly-1'].faces.getSequenceFromMask(
    ('[#c000028 ]', ), ))
mdb.models['Model-1'].rootAssembly.Surface(name='hige1_lateral', side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['HingeAssembly-1'].faces.getSequenceFromMask(
    ('[#1000884 ]', ), ))
mdb.models['Model-1'].rootAssembly.Surface(name='hige2_hole', side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['HingeAssembly-2'].faces.getSequenceFromMask(
    ('[#c000028 ]', ), ))
mdb.models['Model-1'].rootAssembly.Surface(name='hige2_lateral', side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['HingeAssembly-2'].faces.getSequenceFromMask(
    ('[#1000884 ]', ), ))
mdb.models['Model-1'].rootAssembly.surfaces.changeKey(fromName='hinge1-HOLE', 
    toName='hinge1-hole')
mdb.models['Model-1'].ContactProperty('IntProp-1')
mdb.models['Model-1'].interactionProperties['IntProp-1'].TangentialBehavior(
    dependencies=0, directionality=ISOTROPIC, elasticSlipStiffness=None, 
    formulation=PENALTY, fraction=0.005, maximumElasticSlip=FRACTION, 
    pressureDependency=OFF, shearStressLimit=None, slipRateDependency=OFF, 
    table=((0.3, ), ), temperatureDependency=OFF)
mdb.models['Model-1'].interactionProperties['IntProp-1'].NormalBehavior(
    allowSeparation=ON, constraintEnforcementMethod=DEFAULT, 
    pressureOverclosure=HARD)
mdb.models['Model-1'].SurfaceToSurfaceContactStd(adjustMethod=NONE, 
    clearanceRegion=None, createStepName='Initial', datumAxis=None, 
    enforcement=NODE_TO_SURFACE, initialClearance=OMIT, interactionProperty=
    'IntProp-1', master=mdb.models['Model-1'].rootAssembly.surfaces['Surf-1'], 
    name='Int-1', slave=
    mdb.models['Model-1'].rootAssembly.surfaces['hinge1-hole'], sliding=FINITE, 
    smooth=0.2, surfaceSmoothing=NONE, thickness=OFF)
mdb.models['Model-1'].SurfaceToSurfaceContactStd(adjustMethod=NONE, 
    clearanceRegion=None, createStepName='Initial', datumAxis=None, 
    enforcement=NODE_TO_SURFACE, initialClearance=OMIT, interactionProperty=
    'IntProp-1', master=mdb.models['Model-1'].rootAssembly.surfaces['Surf-1'], 
    name='Int-2', slave=
    mdb.models['Model-1'].rootAssembly.surfaces['hige2_hole'], sliding=FINITE, 
    smooth=0.2, surfaceSmoothing=NONE, thickness=OFF)
mdb.models['Model-1'].SurfaceToSurfaceContactStd(adjustMethod=NONE, 
    clearanceRegion=None, createStepName='Initial', datumAxis=None, 
    initialClearance=OMIT, interactionProperty='IntProp-1', master=
    mdb.models['Model-1'].rootAssembly.surfaces['hige1_lateral'], name='Int-3', 
    slave=mdb.models['Model-1'].rootAssembly.surfaces['hige2_lateral'], 
    sliding=FINITE, surfaceSmoothing=NONE, thickness=ON)
mdb.models['Model-1'].rootAssembly.Set(faces=
    mdb.models['Model-1'].rootAssembly.instances['HingeAssembly-2'].faces.getSequenceFromMask(
    ('[#40000 ]', ), ), name='Set-1')
mdb.models['Model-1'].DisplacementBC(amplitude=UNSET, createStepName='Initial', 
    distributionType=UNIFORM, fieldName='', localCsys=None, name='BC-1', 
    region=mdb.models['Model-1'].rootAssembly.sets['Set-1'], u1=SET, u2=SET, 
    u3=SET, ur1=UNSET, ur2=UNSET, ur3=UNSET)
mdb.models['Model-1'].rootAssembly.Set(name='Set-2', referencePoints=(
    mdb.models['Model-1'].rootAssembly.instances['Part-2-1'].referencePoints[2], 
    ))
mdb.models['Model-1'].DisplacementBC(amplitude=UNSET, createStepName='Initial', 
    distributionType=UNIFORM, fieldName='', localCsys=None, name='BC-2', 
    region=mdb.models['Model-1'].rootAssembly.sets['Set-2'], u1=UNSET, u2=SET, 
    u3=SET, ur1=SET, ur2=UNSET, ur3=SET)
mdb.models['Model-1'].rootAssembly.Surface(name='Surf-6', side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['HingeAssembly-1'].faces.getSequenceFromMask(
    ('[#40000 ]', ), ))
mdb.models['Model-1'].Pressure(amplitude=UNSET, createStepName='Step-1', 
    distributionType=UNIFORM, field='', magnitude=-1.0, name='Load-1', region=
    mdb.models['Model-1'].rootAssembly.surfaces['Surf-6'])
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='Model-1', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='Job-1', nodalOutputPrecision=SINGLE, 
    numCpus=1, numGPUs=0, queue=None, resultsFormat=ODB, scratch='', type=
    ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.jobs['Job-1'].submit(consistencyChecking=OFF)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': '517-12-PC', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE SURFACE INTERACTION INTPROP-1 FOR CONTACT PAIR (ASSEMBLY_HIGE2_LATERAL,ASSEMBLY_HIGE1_LATERAL) IS USED BY A CONTACT PAIR THAT USES STRICTLY-ENFORCED HARD CONTACT BY DEFAULT.  THIS CONTACT PAIR WILL USE STRICTLY-ENFORCED HARD CONTACT.  IF THIS IS NOT THE INTENDED USE, DEFINE A DIFFERENT SURFACE INTERACTION TO BE USED BY THIS CONTACT PAIR.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\Job-1.odb', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': '517-12-PC', 'handle': 2228, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.0, 'attempts': 0, 
    'timeIncrement': 0.01, 'increment': 0, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 0, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Job-1']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-1', 'memory': 104.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.01, 'attempts': 1, 
    'timeIncrement': 0.01, 'increment': 1, 'stepTime': 0.01, 'step': 1, 
    'jobName': 'Job-1', 'severe': 5, 'iterations': 6, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.02, 'attempts': 1, 
    'timeIncrement': 0.01, 'increment': 2, 'stepTime': 0.02, 'step': 1, 
    'jobName': 'Job-1', 'severe': 2, 'iterations': 3, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.035, 'attempts': 1, 
    'timeIncrement': 0.015, 'increment': 3, 'stepTime': 0.035, 'step': 1, 
    'jobName': 'Job-1', 'severe': 1, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.0575, 'attempts': 1, 
    'timeIncrement': 0.0225, 'increment': 4, 'stepTime': 0.0575, 'step': 1, 
    'jobName': 'Job-1', 'severe': 1, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.09125, 'attempts': 1, 
    'timeIncrement': 0.03375, 'increment': 5, 'stepTime': 0.09125, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.141875, 'attempts': 1, 
    'timeIncrement': 0.050625, 'increment': 6, 'stepTime': 0.141875, 'step': 1, 
    'jobName': 'Job-1', 'severe': 2, 'iterations': 3, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 7, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.2178125, 'attempts': 1, 
    'timeIncrement': 0.0759375, 'increment': 7, 'stepTime': 0.2178125, 
    'step': 1, 'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 8, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.33171875, 'attempts': 1, 
    'timeIncrement': 0.11390625, 'increment': 8, 'stepTime': 0.33171875, 
    'step': 1, 'jobName': 'Job-1', 'severe': 2, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 9, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.502578125, 'attempts': 1, 
    'timeIncrement': 0.170859375, 'increment': 9, 'stepTime': 0.502578125, 
    'step': 1, 'jobName': 'Job-1', 'severe': 2, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 10, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.7588671875, 'attempts': 1, 
    'timeIncrement': 0.2562890625, 'increment': 10, 'stepTime': 0.7588671875, 
    'step': 1, 'jobName': 'Job-1', 'severe': 2, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 11, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.2411328125, 'increment': 11, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'Job-1', 'severe': 2, 'iterations': 3, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_COMPLETED, {'time': 'Wed Oct 25 14:13:42 2017', 
    'jobName': 'Job-1'})
# Save by 517-12 on 2017_10_25-14.16.28; build 6.14-3 2015_02_03-06.17.19 134785
